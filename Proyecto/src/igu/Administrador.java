/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package igu;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Usuario
 */
public class Administrador extends javax.swing.JFrame {
   ArrayList<Profesores> profesor = new ArrayList<>();
    private String codigo;
    private String nombre;
    private String apellido;
    private String correo;
    private String genero;
    
    
     ArrayList<Curso> cursos = new ArrayList<>();
    private String codigoc;
    private String nombrec;
    private String creditos ;
    private String profesorc;
    private String alumnos;
    

    /**
     * Creates new form Administrador
     */
    public Administrador() {
        initComponents();
        this.codigo = "";
        this.nombre = "";
        this.apellido = "";
        this.correo = "";
        this.genero = "";
        this.codigoc = "";
        this.nombrec = "";
        this.creditos = "";
        this.profesorc = "";
        this.alumnos = "";
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jGenero = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jprofe = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nombre:");

        jLabel2.setText("Apellido:");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Correo:");

        jLabel4.setText("Genero:");

        jGenero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hombre", "Mujer" }));
        jGenero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGeneroActionPerformed(evt);
            }
        });

        jButton1.setText("Agregar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Actualizar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setText("Eliminar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Carga Masiva");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton5.setText("Guardar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 343, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 316, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jGenero, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(27, 27, 27)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(19, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(118, 118, 118))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jGenero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton3)
                                    .addComponent(jButton4))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addGap(32, 32, 32)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Catedraticos", jPanel4);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jButton6.setText("Carga Masiva");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 343, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 316, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 148, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
        );

        jTabbedPane1.addTab("Estudiantes", jPanel2);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        jButton7.setText("Agregar");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Eliminar");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Actualizar");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Carga Masiva");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("Guardar");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jLabel5.setText("Codigo;");

        jLabel6.setText("Nombre;");

        jLabel7.setText("Creditos;");

        jLabel8.setText("Profesor;");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 344, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 273, Short.MAX_VALUE)
        );

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jprofe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Profesor 1", "profesor 2", "profesor 3", "profesor 4", "profesor 5", "profesor 6", "profesor 7", "profesor 8-" }));
        jprofe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jprofeActionPerformed(evt);
            }
        });

        jLabel9.setText("Alumnos;");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jprofe, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jprofe, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton7)
                            .addComponent(jButton8))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton9)
                            .addComponent(jButton10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cursos", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 944, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jGeneroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGeneroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jGeneroActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      int[] filasSeleccionadas = jTable1.getSelectedRows();

    if (filasSeleccionadas.length == 0) {
        // No se ha seleccionado ninguna fila, mostrar un mensaje de error
        JOptionPane.showMessageDialog(this, "Por favor, seleccione una o más filas para eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
    } else {
        // Se han seleccionado filas, proceder a eliminarlas
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        
        // Recorre las filas seleccionadas en orden inverso para evitar problemas con los índices
        for (int i = filasSeleccionadas.length - 1; i >= 0; i--) {
            int filaSeleccionada = filasSeleccionadas[i];
            modelo.removeRow(filaSeleccionada);
            
            // También debes eliminar el profesor correspondiente de la lista
            profesor.remove(filaSeleccionada);
        }
        
        // Actualizar la gráfica circular
        crearGraficaCircular();
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    
    private void crearGraficaCircular() {
    DefaultPieDataset dataset = new DefaultPieDataset();

    int hombres = 0;
    int mujeres = 0;

    // Calcula la cantidad de hombres y mujeres en la lista de profesores
    for (Profesores p : profesor) {
        if (p.getGenero().equalsIgnoreCase("Hombre")) {
            hombres++;
        } else if (p.getGenero().equalsIgnoreCase("Mujer")) {
            mujeres++;
        }
    }

    // Agrega los datos al dataset
    dataset.setValue("Hombres (" + hombres + ")", hombres);
    dataset.setValue("Mujeres (" + mujeres + ")", mujeres);

    // Crea el gráfico circular
    JFreeChart chart = ChartFactory.createPieChart("Distribución de Género", dataset, true, true, false);

    // Crea un panel para mostrar el gráfico
    ChartPanel chartPanel = new ChartPanel(chart);
    
    // Establece el tamaño fijo del panel
    chartPanel.setPreferredSize(new java.awt.Dimension(300, 300)); // Cambia el tamaño según tus preferencias

    jPanel1.setLayout(new java.awt.BorderLayout());
    jPanel1.add(chartPanel, BorderLayout.CENTER);
    jPanel1.validate();
}

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Profesores p = new Profesores();
       if(true){
           
           obtenerDatosp();
       }else{
            p.setCodigo(profesor.size());
        p.setNombre(jTextField1.getText());
        p.setApellido(jTextField2.getText());
        p.setCorreo(jTextField3.getText());
        p.setGenero(jGenero.getSelectedItem().toString());
        
      profesor.add(p);
      
      jTextField1.setText("");
      jTextField2.setText("");
      jTextField3.setText("");
      jGenero.setSelectedItem(""); 
      
      llenartabla(); 
     
       } 
       crearGraficaCircular();
        
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        JFileChooser seleccionarArchivo = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("csv","csv");
        
        seleccionarArchivo.setFileFilter(filtro);
        int seleccionar = seleccionarArchivo.showOpenDialog(this);
        if(seleccionar == JFileChooser.APPROVE_OPTION){
            File archivo = seleccionarArchivo.getSelectedFile();
            
            cargarArchivo(archivo);
            crearGraficaCircular();
            
            
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    public void guardarArchivo(File archivo){
        FileWriter fichero = null;
        PrintWriter pw = null;
        try{
            fichero = new FileWriter(archivo);
            pw = new PrintWriter(fichero);
            
            for(Profesores p: profesor){
                String linea=p.getCodigo()+","+p.getNombre()+","+p.getApellido()+","+p.getCorreo()+","+p.getGenero();
                pw.println(linea);
                
            }
            
        }catch(Exception ex){
            ex.printStackTrace();
            
        }
        finally{
            try{
                if(fichero!=null){
                    fichero.close();
                    
                }
            }catch (Exception e){
                e.printStackTrace();
            }
        }
        
    }
    
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        
        JFileChooser seleccionarArchivo = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("archivo csv","csv");
        
        seleccionarArchivo.setFileFilter(filtro);
        int seleccionar = seleccionarArchivo.showOpenDialog(this);
        if(seleccionar == JFileChooser.APPROVE_OPTION){
            File archivo = seleccionarArchivo.getSelectedFile();
            
            guardarArchivo(archivo);
            
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
         int filaSeleccionada = jTable1.getSelectedRow();

    if (filaSeleccionada == -1) {
        // No se ha seleccionado ninguna fila, mostrar un mensaje de error
        JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila para modificar.", "Error", JOptionPane.ERROR_MESSAGE);
    } else {
        // Se ha seleccionado una fila, obtener la información actual
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        int codigo = (int) modelo.getValueAt(filaSeleccionada, 0);
        String nombreActual = (String) modelo.getValueAt(filaSeleccionada, 1);
        String apellidoActual = (String) modelo.getValueAt(filaSeleccionada, 2);
        String correoActual = (String) modelo.getValueAt(filaSeleccionada, 3);
        String generoActual = (String) modelo.getValueAt(filaSeleccionada, 4);

        // Solicitar los nuevos valores al usuario
        String nuevoNombre = JOptionPane.showInputDialog(this, "Nuevo nombre:", nombreActual);
        String nuevoApellido = JOptionPane.showInputDialog(this, "Nuevo apellido:", apellidoActual);
        String nuevoCorreo = JOptionPane.showInputDialog(this, "Nuevo correo:", correoActual);
        String nuevoGenero = (String) JOptionPane.showInputDialog(this, "Nuevo género:", "Seleccionar género",
                JOptionPane.PLAIN_MESSAGE, null, new String[]{"Hombre", "Mujer"}, generoActual);

        // Verificar si ya existe un profesor con las mismas características antes de realizar modificaciones
        boolean profesorExistente = false;

        for (Profesores existente : profesor) {
            if (existente.getNombre().equalsIgnoreCase(nuevoNombre) &&
                existente.getApellido().equalsIgnoreCase(nuevoApellido) &&
                existente.getCorreo().equalsIgnoreCase(nuevoCorreo) &&
                existente.getGenero().equalsIgnoreCase(nuevoGenero)) {
                profesorExistente = true;
                break; // Ya se encontró un profesor existente, no es necesario continuar verificando
            }
        }

        if (profesorExistente) {
            // Mostrar un mensaje de error
            JOptionPane.showMessageDialog(this, "El profesor con las mismas características ya existe.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // No existe un profesor con las mismas características, actualizar la tabla y la lista de profesores
            modelo.setValueAt(nuevoNombre, filaSeleccionada, 1);
            modelo.setValueAt(nuevoApellido, filaSeleccionada, 2);
            modelo.setValueAt(nuevoCorreo, filaSeleccionada, 3);
            modelo.setValueAt(nuevoGenero, filaSeleccionada, 4);

            // También debes actualizar el profesor correspondiente en la lista
            Profesores p = profesor.get(filaSeleccionada);
            p.setNombre(nuevoNombre);
            p.setApellido(nuevoApellido);
            p.setCorreo(nuevoCorreo);
            p.setGenero(nuevoGenero);

            // Actualizar la gráfica circular
            crearGraficaCircular();
        }
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    public void obtenerDatosc (){
        Curso c = new Curso();
        this.codigoc = jTextField4.getText();
        this.nombrec = jTextField5.getText();
        this.creditos = jTextField6.getText();
        this.creditos = jTextField6.getText();
         this.alumnos = jTextField7.getText();
        this.profesorc = jprofe.getSelectedItem().toString();
        
        String incompleto = "";
        if(codigoc.equals("")) incompleto += "\nCodigo";
        if(nombrec.equals("")) incompleto += "\nNombre";
        if(creditos.equals("")) incompleto += "\nCreditos";
        if(alumnos.equals("")) incompleto += "\nAlumnos";
        if(profesorc.equals("")) incompleto += "\nCodigo";
        
        

    if (!incompleto.isEmpty()) {
        // Mostrar mensaje de campos obligatorios incompletos
        Mensaje("Los siguientes campos son obligatorios:" + incompleto);
    } else {
        boolean CursoExistente = false;

        // Verificar si ya existe un profesor con las mismas características
        for (Curso existente : cursos) {
            if (existente.getCodigoc().equalsIgnoreCase(codigoc) &&
                existente.getNombrec().equalsIgnoreCase(nombrec) &&
                existente.getCreditos().equalsIgnoreCase(creditos) &&
                existente.getAlumnos().equalsIgnoreCase(alumnos) &&
                existente.getProfesorc().equalsIgnoreCase(profesorc)) {
                CursoExistente = true;
                break; // Ya se encontró un profesor existente, no es necesario continuar verificando
            }
        }

        if (CursoExistente) {
            // Mostrar un mensaje de error
            Mensaje("Curso ya registrado.");
            jTextField4.setText("");
            jTextField5.setText("");
            jTextField6.setText("");
            jTextField7.setText("");
        } else {
            // No existe un profesor con las mismas características y todos los campos obligatorios están completos
            c.setCodigoc(codigoc);
            c.setNombrec(nombrec);
            c.setCreditos(creditos);
            c.setAlumnos(alumnos);
            c.setProfesorc(profesorc);

            cursos.add(c);

            jTextField4.setText("");
            jTextField5.setText("");
            jTextField6.setText("");
            jTextField7.setText("");
            jGenero.setSelectedItem("");

            llenarTablac();
        }
    }
    }
    
    
    
    
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
     int filaSeleccionada = jTable3.getSelectedRow();

    if (filaSeleccionada == -1) {
       
        JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila para eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
    } else {
        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea eliminar esta fila?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

        if (confirmacion == JOptionPane.YES_OPTION) {
            DefaultTableModel modelo = (DefaultTableModel) jTable3.getModel();
            modelo.removeRow(filaSeleccionada);

           
            cursos.remove(filaSeleccionada);

            
        }
    }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        Curso c = new Curso();
        if(true){

            obtenerDatosc();
        }else{

            c.setCodigoc(jTextField4.getText());
            c.setNombrec(jTextField5.getText());
            c.setCreditos(jTextField6.getText());
            c.setAlumnos(jTextField7.getText());
            c.setProfesorc(jprofe.getSelectedItem().toString());

            cursos.add(c);

            jTextField4.setText("");
            jTextField5.setText("");
            jTextField6.setText("");
            jTextField7.setText("");
            jprofe.setSelectedItem("");

            llenarTablac();

        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        JFileChooser seleccionarArchivo = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("csv","csv");

        seleccionarArchivo.setFileFilter(filtro);
        int seleccionar = seleccionarArchivo.showOpenDialog(this);
        if(seleccionar == JFileChooser.APPROVE_OPTION){
            File archivo = seleccionarArchivo.getSelectedFile();

            cargarArchivoc(archivo);
            crearGraficaCircular();

        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        //GUARDAR
        JFileChooser seleccionarArchivo = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("archivo csv","csv");

        seleccionarArchivo.setFileFilter(filtro);

        int seleccionar = seleccionarArchivo.showOpenDialog(this);

        if(seleccionar == JFileChooser.APPROVE_OPTION){
            File archivo = seleccionarArchivo.getSelectedFile();
            guardarArchivoC(archivo);
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jprofeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jprofeActionPerformed
        jTextField1.getText();
    }//GEN-LAST:event_jprofeActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
      int filaSeleccionada = jTable3.getSelectedRow();

    if (filaSeleccionada == -1) {
       
        JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila para modificar.", "Error", JOptionPane.ERROR_MESSAGE);
    } else {
        
        DefaultTableModel modelo = (DefaultTableModel) jTable3.getModel();
        String codigoActual = (String) modelo.getValueAt(filaSeleccionada, 0);
        String nombreActual = (String) modelo.getValueAt(filaSeleccionada, 1);
        String creditosActual = (String) modelo.getValueAt(filaSeleccionada, 2);
        String alumnosActual = (String) modelo.getValueAt(filaSeleccionada, 3);
        String profesorActual = (String) modelo.getValueAt(filaSeleccionada, 4);

        
        String nuevoCodigo = JOptionPane.showInputDialog(this, "Nuevo código:", codigoActual);
        String nuevoNombre = JOptionPane.showInputDialog(this, "Nuevo nombre:", nombreActual);
        String nuevosCreditos = JOptionPane.showInputDialog(this, "Nuevos créditos:", creditosActual);
        String nuevosAlumnos = JOptionPane.showInputDialog(this, "Nuevos alumnos:", alumnosActual);

        
        JComboBox<String> comboBoxProfesor = new JComboBox<>(jprofe.getModel());
        comboBoxProfesor.setSelectedItem(profesorActual);
        int opcion = JOptionPane.showConfirmDialog(this, comboBoxProfesor, "Seleccione un profesor",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (opcion == JOptionPane.OK_OPTION) {
            String nuevoProfesor = comboBoxProfesor.getSelectedItem().toString();

            
            boolean cursoExistente = false;

            for (Curso existente : cursos) {
                if (existente.getCodigoc().equalsIgnoreCase(nuevoCodigo)) {
                    cursoExistente = true;
                    break;
                }
            }

            if (cursoExistente) {
                
                JOptionPane.showMessageDialog(this, "El curso con el mismo código ya existe.", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
               
                modelo.setValueAt(nuevoCodigo, filaSeleccionada, 0);
                modelo.setValueAt(nuevoNombre, filaSeleccionada, 1);
                modelo.setValueAt(nuevosCreditos, filaSeleccionada, 2);
                modelo.setValueAt(nuevosAlumnos, filaSeleccionada, 3);
                modelo.setValueAt(nuevoProfesor, filaSeleccionada, 4);

               
                Curso curso = cursos.get(filaSeleccionada);
                curso.setCodigoc(nuevoCodigo);
                curso.setNombrec(nuevoNombre);
                curso.setCreditos(nuevosCreditos);
                curso.setAlumnos(nuevosAlumnos);
                curso.setProfesorc(nuevoProfesor);

               

               
            }
        }
    }
    }//GEN-LAST:event_jButton9ActionPerformed

    
    public void cargarArchivoc(File archivo){
        
        FileReader fr = null;
        BufferedReader br = null;
        
        try{
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);
            
            String linea;
            
            while((linea = br.readLine()) !=null){
            
                Curso c = new Curso();
                String arreglo [] = linea.split(",");
                if(arreglo.length==5){
                    c.setCodigoc(arreglo[0]);
                    c.setNombrec(arreglo[1]);
                    c.setCreditos(arreglo[2]);
                    c.setAlumnos(arreglo[3]);
                    c.setProfesorc(arreglo[4]);
                
                    
                    cursos.add(c);
                    
                    
                }
                
        }
            llenarTablac();
            
        }catch(IOException | NumberFormatException ex){
        }
        finally{
            try{
               if(fr!= null){
                fr.close();
            } 
            }
            catch(IOException ex){
            }
        }
        
    }
    
    
    
    /**** lllllllll  *****/
    public void cargarArchivo(File archivo){
        
        FileReader fr = null;
        BufferedReader br = null;
        
        try{
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);
            
            String linea;
            
            while((linea = br.readLine()) !=null){
            
                Profesores p = new Profesores();
                String arreglo [] = linea.split(",");
                if(arreglo.length==5){
                    p.setCodigo(Integer.parseInt(arreglo[0]));
                    p.setNombre(arreglo[1]);
                    p.setApellido(arreglo[2]);
                    p.setCorreo(arreglo[3]);
                    p.setGenero(arreglo[4]);
                    
                    profesor.add(p);
                    
                    
                }
                
        }
            llenartabla();
            
        }catch(IOException | NumberFormatException ex){
        }
        finally{
            try{
               if(fr!= null){
                fr.close();
            } 
            }
            catch(IOException ex){
            }
        }
        
        
    }
  
    
    public void obtenerDatosp() {
    Profesores p = new Profesores();
    String nombre = jTextField1.getText();
    String apellido = jTextField2.getText();
    String correo = jTextField3.getText();
    String genero = jGenero.getSelectedItem().toString();

    String incompleto = "";

    if (nombre.isEmpty()) incompleto += "\nNombre";
    if (apellido.isEmpty()) incompleto += "\nApellido";
    if (correo.isEmpty()) incompleto += "\nCorreo";

    if (!incompleto.isEmpty()) {
        // Mostrar mensaje de campos obligatorios incompletos
        Mensaje("Los siguientes campos son obligatorios:" + incompleto);
    } else {
        boolean profesorExistente = false;

        // Verificar si ya existe un profesor con las mismas características
        for (Profesores existente : profesor) {
            if (existente.getNombre().equalsIgnoreCase(nombre) &&
                existente.getApellido().equalsIgnoreCase(apellido) &&
                existente.getCorreo().equalsIgnoreCase(correo) &&
                existente.getGenero().equalsIgnoreCase(genero)) {
                profesorExistente = true;
                break; // Ya se encontró un profesor existente, no es necesario continuar verificando
            }
        }

        if (profesorExistente) {
            // Mostrar un mensaje de error
            Mensaje("Profesor ya registrado.");
            jTextField1.setText("");
            jTextField2.setText("");
            jTextField3.setText("");
        } else {
            // No existe un profesor con las mismas características y todos los campos obligatorios están completos
            p.setCodigo(profesor.size());
            p.setNombre(nombre);
            p.setApellido(apellido);
            p.setCorreo(correo);
            p.setGenero(genero);

            profesor.add(p);

            jTextField1.setText("");
            jTextField2.setText("");
            jTextField3.setText("");
            jGenero.setSelectedItem("");

            llenartabla();
        }
    }
}
    
    
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jGenero;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JComboBox<String> jprofe;
    // End of variables declaration//GEN-END:variables

    public void llenartabla() {
    DefaultTableModel mD = new DefaultTableModel(new String[]{"Codigo","Nombre","Apellido","Correo","Genero"},profesor.size()); 
    jTable1.setModel(mD);
    TableModel tm = jTable1.getModel();
    
    for(int i = 0; i<profesor.size();i++){
        Profesores p = profesor.get(i);
        tm.setValueAt(p.getCodigo(), i, 0);
        tm.setValueAt(p.getNombre(), i, 1);
        tm.setValueAt(p.getApellido(), i, 2);
        tm.setValueAt(p.getCorreo(), i, 3);
        tm.setValueAt(p.getGenero(), i, 4);
        
        
    }
    
    
    
    }

    private void Mensaje(String msj) {
 JOptionPane.showMessageDialog(null,msj);
        
    }

    private void mensaje(String msj) {
    JOptionPane.showMessageDialog(null,msj);
    }

    private void llenarTablac() {
       DefaultTableModel mD = new DefaultTableModel(new String[]{"Codigo","Nombre","Creditos","Alumnos","Profesor"},cursos.size()); 
    jTable3.setModel(mD);
    TableModel tmc = jTable3.getModel();
    
    for(int i = 0; i<cursos.size();i++){
        Curso c = cursos.get(i);
        tmc.setValueAt(c.getCodigoc(), i, 0);
        tmc.setValueAt(c.getNombrec(), i, 1);
        tmc.setValueAt(c.getCreditos(), i, 2);
        tmc.setValueAt(c.getAlumnos(), i, 3);
        tmc.setValueAt(c.getProfesorc(), i, 4);
       
        
        
    }
    
    
    
    }

    public void guardarArchivoC(File archivo) {
    FileWriter fichero = null;
        PrintWriter pw = null;
        try{
            fichero = new FileWriter(archivo);
            pw = new PrintWriter(fichero);
            
            for(Curso c: cursos){
                String linea=c.getCodigoc()+","+c.getNombrec()+","+c.getCreditos()+","+c.getAlumnos()+","+c.getProfesorc();
                pw.println(linea);
                
            }
            
        }catch(Exception ex){
            ex.printStackTrace();
            
        }
        finally{
            try{
                if(fichero!=null){
                    fichero.close();
                    
                }
            }catch (Exception e){
                e.printStackTrace();
            }
        }
    }
}
